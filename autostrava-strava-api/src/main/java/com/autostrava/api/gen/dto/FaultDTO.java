/*
 * Strava API v3
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.autostrava.api.gen.dto;

import java.util.Objects;
import java.util.Arrays;
import com.autostrava.api.gen.dto.ErrorDTO;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Encapsulates the errors that may be returned from the API.
 */
@ApiModel(description = "Encapsulates the errors that may be returned from the API.")
@JsonPropertyOrder({
  FaultDTO.JSON_PROPERTY_ERRORS,
  FaultDTO.JSON_PROPERTY_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-11-17T18:37:28.613+01:00[Europe/Belgrade]")
public class FaultDTO {
  public static final String JSON_PROPERTY_ERRORS = "errors";
  private List<ErrorDTO> errors = null;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;


  public FaultDTO errors(List<ErrorDTO> errors) {
    
    this.errors = errors;
    return this;
  }

  public FaultDTO addErrorsItem(ErrorDTO errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * The set of specific errors associated with this fault, if any.
   * @return errors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of specific errors associated with this fault, if any.")
  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ErrorDTO> getErrors() {
    return errors;
  }


  public void setErrors(List<ErrorDTO> errors) {
    this.errors = errors;
  }


  public FaultDTO message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * The message of the fault.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The message of the fault.")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaultDTO fault = (FaultDTO) o;
    return Objects.equals(this.errors, fault.errors) &&
        Objects.equals(this.message, fault.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaultDTO {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

